plugins {
	id 'org.springframework.boot' version '2.7.0'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
	id 'maven-publish'
	id 'org.sonarqube' version '3.0'
}

group = 'com.pragma.api.image'
version = '0.0.1-SNAPSHOT'

sourceCompatibility = '11'
targetCompatibility = '11'

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-amqp'
	implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-actuator'

	implementation 'io.springfox:springfox-swagger2:2.9.2'
	implementation 'org.json:json:20190722'

	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'

	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	testImplementation 'org.springframework.amqp:spring-rabbit-test'
}

tasks.named('test') {
	environment "SPRING_PROFILES_ACTIVE", "test"
	useJUnitPlatform()
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	finalizedBy jacocoTestCoverageVerification
	reports {
		xml.enabled true
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
	}
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/model/**",
					"**/domain/**",
					"**/config/**",
					"**/*Application.class"
			])
		}))
	}
}

jacocoTestCoverageVerification {
	dependsOn jacocoTestReport
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: [
					"**/model/**",
					"**/domain/**",
					"**/config/**",
					"**/*Application.java"
			])
		}))
	}
	violationRules {
		rule {
			limit {
				minimum = 0.0
			}
		}
	}
}

sonarqube {
	properties {
		property "sonar.exclusions", ["**/config/**", "**/domain/**", "**/model/**","**/*Application.java"]
	}
}
